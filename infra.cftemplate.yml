AWSTemplateFormatVersion: 2010-09-09
Rules:
  OnlyUsEast1:
    Assertions:
    - Assert:
        Fn::Equals:
        - Ref: AWS::Region
        - us-east-1
      AssertDescription: 'This template can only be deployed in the us-east-1 region.

        This is because the ACM Certificate must be created in us-east-1 in order to
        be available to CloudFront.

        '

Parameters:
  DomainName:
    Description: The domain name of the website
    Type: String
  HostedZoneId:
    Description: Route53 HostedZoneId for the domain
    Type: String
  HostedZoneName:
    Description: Name of Route53 HostedZone for the domain
    Type: String

Resources:
  LogBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      OwnershipControls:
        Rules:
        - ObjectOwnership: BucketOwnerPreferred
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
        - Id: Delete90DayOldObjects
          ExpirationInDays: 90
          Status: 'Enabled'
      Tags:
      - Key: Project
        Value: website

  OriginBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      LoggingConfiguration:
        DestinationBucketName:
          Ref: LogBucket
        LogFilePrefix: 'origin/'
      Tags:
      - Key: Project
        Value: website

  OriginBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: OriginBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action: s3:GetObject
          Principal:
            Service: cloudfront.amazonaws.com
          Effect: Allow
          Resource:
            Fn::Join:
            - '/'
            - - Fn::GetAtt:
                - OriginBucket
                - Arn
              - '*'
          Condition:
            StringEquals:
              AWS:SourceArn:
                Fn::Sub: arn:aws:cloudfront::${AWS::AccountId}:distribution/${CDN}

  OriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name:
          Fn::Sub:
          - cbcg-net-${guid}
          - guid:
              Fn::Select:
              - 2
              - Fn::Split:
                - /
                - Ref: AWS::StackId
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  TLSCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName:
        Ref: DomainName
      DomainValidationOptions:
      - DomainName:
          Ref: DomainName
        HostedZoneId:
          Ref: HostedZoneId
      ValidationMethod: DNS
      Tags:
      - Key: Project
        Value: website

  ResponseHeadersPolicy:
    Type: AWS::CloudFront::ResponseHeadersPolicy
    Properties:
      ResponseHeadersPolicyConfig:
        Name:
          Fn::Sub: cbcg-net-${AWS::StackName}-security-headers
        SecurityHeadersConfig:
          StrictTransportSecurity:
            AccessControlMaxAgeSec: 63072000
            IncludeSubdomains: true
            Override: true
            Preload: true
          ContentSecurityPolicy:
            ContentSecurityPolicy: default-src 'none'; img-src 'self'; script-src
              'self'; style-src 'self' 'unsafe-inline'; object-src 'none'
            Override: true
          ContentTypeOptions:
            Override: true
          FrameOptions:
            FrameOption: DENY
            Override: true
          ReferrerPolicy:
            ReferrerPolicy: same-origin
            Override: true
          XSSProtection:
            ModeBlock: true
            Override: true
            Protection: true

  IndexRedirectFunction:
    Type: AWS::CloudFront::Function
    Properties:
      AutoPublish: true
      FunctionCode: |
        function handler(event) {
          var request = event.request;
          var uri = request.uri;
          if (uri.endsWith('/')) {
              request.uri += 'index.html';
          } else if (!uri.includes('.')) {
              request.uri += '/index.html';
          }
          return request;
        }
      FunctionConfig:
        Comment: Redirect-Default-Index-Request
        Runtime: cloudfront-js-1.0
      Name:
        Fn::Sub: ${AWS::StackName}-redirect-index-request

  CDN:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
        - Ref: DomainName
        CustomErrorResponses:
        - ErrorCachingMinTTL: 60
          ErrorCode: 403
          ResponseCode: 403
          ResponsePagePath: /403.html
        - ErrorCachingMinTTL: 60
          ErrorCode: 404
          ResponseCode: 404
          ResponsePagePath: /404.html
        DefaultCacheBehavior:
          AllowedMethods:
          - GET
          - HEAD
          # This is the `CachingOptimizedForUncompressedObjects` managed policy;
          # see https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html
          CachePolicyId: 'b2884449-e4de-46a7-ac36-70bc7f1ddd6d'
          Compress: true
          FunctionAssociations:
            - EventType: viewer-request
              FunctionARN:
                Fn::GetAtt:
                - IndexRedirectFunction
                - FunctionMetadata.FunctionARN
          ResponseHeadersPolicyId:
            Ref: ResponseHeadersPolicy
          TargetOriginId:
            Fn::Sub: S3-${AWS::StackName}-root
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2and3
        IPV6Enabled: true
        Logging:
          Bucket:
            Fn::GetAtt:
            - LogBucket
            - DomainName
          IncludeCookies: false
          Prefix: 'cdn/'
        Origins:
        - DomainName:
            Fn::GetAtt:
            - OriginBucket
            - DomainName
          Id:
            Fn::Sub: S3-${AWS::StackName}-root
          OriginAccessControlId:
            Ref: OriginAccessControl
          S3OriginConfig: {}
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn:
            Ref: TLSCertificate
          MinimumProtocolVersion: TLSv1.2_2019
          SslSupportMethod: sni-only
      Tags:
      - Key: Project
        Value: website

  DNSResourceRecords:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName:
        Fn::Sub: ${HostedZoneName}.
      RecordSets:
      - Name:
          Ref: DomainName
        Type: A
        AliasTarget:
          DNSName:
            Fn::GetAtt:
            - CDN
            - DomainName
          EvaluateTargetHealth: false
          HostedZoneId: Z2FDTNDATAQYW2
      - Name:
          Ref: DomainName
        Type: AAAA
        AliasTarget:
          DNSName:
            Fn::GetAtt:
            - CDN
            - DomainName
          EvaluateTargetHealth: false
          HostedZoneId: Z2FDTNDATAQYW2

Outputs:
  OriginBucket:
    Description: Origin bucket
    Value:
      Ref: OriginBucket
  LogBucket:
    Description: Logging bucket
    Value:
      Ref: LogBucket
  CloudfrontDistribution:
    Description: CloudFront distribution ID
    Value:
      Ref: CDN
